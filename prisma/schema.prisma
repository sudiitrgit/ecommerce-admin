// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id      String  @id @default(uuid())
  name    String 
  userId String
  categories Category[] @relation("StoreToCategory")
  billboards Billboard[] @relation("StoreToBillboard")
  sizes Size[] @relation("StoreToSize")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  users User[] @relation("StoreToUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  name String
  products Product[] @relation("CategoryToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  images Image[]
  description String @default("")
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isDelivered Boolean @default(false)
  isPaid Boolean @default(false)
  userId String @default("")
  user User @relation("OrderToUser", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([userId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int @default(1)

  @@index([orderId])
  @@index([productId])
}

model User {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToUser", fields: [storeId], references: [id])
  order Order[] @relation("OrderToUser")
  phone String
  otp Int
  otpExpiry DateTime
  accessToken String @db.Text @default("")
  accessTokenExpiry DateTime @default(now())
  addresses Address[] @relation("UserToAddress")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Address {
  id String @id @default(uuid())
  userId String
  user User @relation("UserToAddress", fields: [userId], references: [id])
  username String
  pincode String
  addressline1 String
  addressline2 String @default("")
  landmark String @default("")
  city String
  state String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

